* Emacs Config

  QUICKSTART:

#+begin_src bash
  cd $HOME
  mv .emacs.d .emacs.d.saved
  git clone github.com:rhythmx/emacs-config .emacs.d
#+end_src

  Embedded withing the text of this file is my actual emacs
  configuration. It uses org-babel mode to document everything inline.


*** Personal Information
***** Set up personalization vars

      Things that currently need to be defined by the private file in
      order for the rest of this config to function:

#+begin_src emacs-lisp
; Just load some defaults here for public commits 
(setq user-full-name "Configure-Me")
(setq user-mail-addr "plz@configure.me")
(setq doc-directory "~/Documents")
#+end_src

***** Load up personalization from a file

      No reason any of this ever needs to get committed to github.

      If the PrivateConfig.org file exists, it will be evaluated but
      never commited to source control so it is suitable for storage
      of more sensitive info.

#+begin_src emacs-lisp
(if (file-readable-p "~/.emacs.d/PrivateConfig.org")
    (org-babel-load-file "~/.emacs.d/PrivateConfig.org"))
#+end_src

*** Package Management

***** Configure & Init packages.el

      Set up the package menagement system and add some of the more
      popular public package repositories. This should sync with the
      remote servers to ensure package lists are up-to-date.

#+begin_src emacs-lisp
(require 'package)

; ELPA is the official emacs repo (iirc?)
(add-to-list 'package-archives
             '("elpa" . "http://tromey.com/elpa/"))

(add-to-list 'package-archives
             '("melpa-stable" . "http://melpa-stable.milkbox.net/packages/"))

; Marmalade is also very popular
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/"))

(package-initialize)
#+end_src

***** Automatically install required packages

      You can modify the list below to include any packages that may
      be required later on during initialization. If any in the list
      are mising, they will be automatically installed.

#+begin_src emacs-lisp
(setq sb:package_list
  '(
      cyberpunk-theme
      magit 
      ido-ubiquitous
      lua-mode
      haskell-mode
      markdown-mode
   )
)

(dolist (package sb:package_list)
  (when (not (package-installed-p package))
    (package-refresh-contents)
    (package-install package)))
#+end_src

***** Load PATH from .bashrc (if it makes sense on current platform)

      #+begin_src emacs-lisp
      (defun set-exec-path-from-shell-PATH ()
             (let ((path-from-shell (replace-regexp-in-string
                                     "[ \t\n]*$"
                                     ""
                                     (shell-command-to-string "$SHELL --login -c 'echo $PATH'"))))
                  (setenv "PATH" path-from-shell)
                  (setq eshell-path-env path-from-shell) ; for eshell users
                  (setq exec-path (split-string path-from-shell path-separator))))
      (if (or (eq system-type 'darwin) (eq system-type 'gnu/linux))
          (set-exec-path-from-shell-PATH)) 
      #+end_src
*** Appearance
    
***** Select a better font. 

Consolas is my favorite, but it's only available
by default in Windows. However it's easy enough to install the
Microsoft TrueType fonts in *nix.

#+begin_src emacs-lisp
; List of fonts in order of preference
(setq sb:preferred-fonts 
  '(
     "Consolas" 
     "Courier New" 
     "terminus" 
     "DejaVu Sans Mono"
  )
)

(defun sb:set-font (fontlist)
  (if (find-font  (font-spec :name (car fontlist)))

      ; Font exists, so set it
      (progn (set-frame-font (car fontlist))
             (set-face-attribute 'default nil :height 120))

      ; Font not found, move on to next
      (progn (sb:set-font (cdr fontlist)))))

(when (display-graphic-p)
      (sb:set-font sb:preferred-fonts))
#+end_src

***** Remove all of the UI

I don't like looking at a bunch of menus and scrollbars. This goes
double when I'm on one of my smaller laptops where screen space is premium.

#+begin_src emacs-lisp
    (scroll-bar-mode 0)
    (menu-bar-mode 0)
    (tool-bar-mode 0)
#+end_src

***** No startup screen

#+begin_src elisp
  (setq inhibit-startup-message t)
#+end_src
			
***** Default Theme

      You can set per-mode themes later on

#+begin_src emacs-lisp
(load-theme 'cyberpunk t)
#+end_src

***** Fullscreen mode [F11 key]

      Here I define a function that will toggle fullscreen mode
      on/off. 

#+begin_src emacs-lisp
(defun toggle-fullscreen (&optional f)
  (interactive)
  (let ((current-value (frame-parameter nil 'fullscreen)))
    (set-frame-parameter nil 'fullscreen
      (if (equal 'fullboth current-value)
        (if (boundp 'old-fullscreen) old-fullscreen nil)
        (progn (setq old-fullscreen current-value)
          'fullboth)))))
(global-set-key [f11] 'toggle-fullscreen)

; Uncomment to auto-fullscreen on startup
;(toggle-fullscreen)
#+end_src

*** Setup Individual Modes

***** Default Behavior
******* Get rid of backup files (Foo.bar~)

	This forces all backup files into a single system-wide
	directory so that they don't pollute the whole filesytem.

#+begin_src emacs-lisp
    (setq
          backup-by-copying t
	  backup-directory-alist '(("." . "~/.saves")))
#+end_src

******* Line and column numbers in status bar
			#+begin_src emacs-lisp
(linum-mode 0)
(line-number-mode 1)
(column-number-mode 1)
			#+end_src
***** ido | ido-ubiquitous

      IDO MODE IS THE SHIT. (aka interactive auto-completion for find-file, M-x, etc)

#+begin_src emacs-lisp
(ido-mode t)
(ido-ubiquitous-mode)
#+end_src

***** magit-mode

******* Screw the gawdy highlighting of diff

	#+begin_src emacs-lisp
          (eval-after-load "magit"
            ;; no highlight
             (setq magit-highlight-section 0))
	#+end_src

******* Magit wants to hide release notes via elisp now?

	#+begin_src emacs-lisp
	  (setq magit-last-seen-setup-instructions "1.4.0")
	#+end_src

******* 
***** Sean's Org System (configures org-mode too)
      
      Load org system config from file share, if present.
      
    #+begin_src emacs-lisp

      ; Determine root dir of org system based on system type (because
      ; windows paths are retarded)

      (cond ((eq system-type 'gnu/linux) 
             (setq sb:orgdir "/storage/organizer"))
            ((eq system-type 'windows-nt)
             (setq sb:orgdir "Z:\\organizer"))
            (t
             (setq sb:orgdir "/")))

      ; Define some helper functions to keep path specs small

      (defun sb:orgdircat (filename)
        (concat (file-name-as-directory sb:orgdir)  filename))

      ; Check that guessed paths are sane, assume connectivity problem if not

      (if (and (file-directory-p sb:orgdir)
               (file-exists-p (sb:orgdircat "config.org")))
          (org-babel-load-file (sb:orgdircat "config.org"))
          (error "File server does not seem to be accessible"))

    #+end_src


***** C mode
      
      #+begin_src emacs-lisp
        (defun sb:c-mode-hook () 
               (c-set-style "bsd")
               (setq c-basic-offset 4
                     indent-tabs-mode nil
                     default-tab-width 4))
               
        (add-hook 'c-mode-hook 'sb:c-mode-hook)
      #+end_src
***** C++ mode
      #+begin_src emacs-lisp
        (defun sb:c++-mode-hook () 
               (c-set-style "bsd")
               (setq c-basic-offset 4
                     indent-tabs-mode nil
                     default-tab-width 4))
               
        (add-hook 'c++-mode-hook 'sb:c++-mode-hook)
      #+end_src
***** Assembler Mode
#begin_src emacs-lisp
	  (defun sb:asm-mode-hook ()
	         (setq c-basic-offset 4
                   indent-tabs-mode nil
                   default-tab-width 4
		   tab-stop-list (quote (4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 
	            64 68 72 76 80 84 88 92 96 100 104 108 112 116 120))
          ))
      ;      (add-hook 'asm-mode-hook 'sb:asm-mode-hook)
#end_src
	  
***** GnuPG / EasyPG
******* GPG Agent Issues
	
 	Emacs and GPG2 don't play nicely together. Almost impossible
 	to get a working config going for plain terminal mode and
 	automatic-decryption.

	Except... I have no idea how to do this :(

	Emacs and GPG2/pinentry can not share a tty. Also, pinentry is
	impossible to disable from the command line in GPG2.

    #+begin_src emacs-lisp

    #+end_src

***** LaTeX

      Don't "word process", edit src.

      
******* AUCTeX

	Disabled for now
	    
#+begin_src emacs-lisp

;(load "auctex.el" nil t t)
;(load "preview-latex.el" nil t t)

;(require 'flymake)

;(defun flymake-get-tex-args (file-name)
;  (list "pdflatex"
;  (list "-file-line-error" "-draftmode" "-interaction=nonstopmode" file-name)))

;(add-hook 'LaTeX-mode-hook 'flymake-mode)

;(setq ispell-program-name "aspell") ; could be ispell as well, depending on your preferences
;(setq ispell-dictionary "english") ; this can obviously be set to any language your spell-checking program supports

;(add-hook 'LaTeX-mode-hook 'flyspell-mode)
;(add-hook 'LaTeX-mode-hook 'flyspell-buffer)

;(setq TeX-auto-save t)
;(setq TeX-parse-self t)
;(setq TeX-save-query nil)

#+end_src

***** Haskell Mode

      
******* Not totally sure what doc mode is yet... sounds like a good enough idea

	#+begin_src emacs-lisp
          (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
	#+end_src

******* Indentation

	#+begin_src emacs-lisp
          ;;(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
          (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
          ;;(add-hook 'haskell-mode-hook 'turn-on-haskell-simple-indent) 
	#+end_src

***** Agda Mode

      #+begin_src emacs-lisp
        (load-file (let ((coding-system-for-read 'utf-8))
                        (shell-command-to-string "agda-mode locate")))
      #+end_src

***** Markdown 

      
******* Setup autoload

      (this should probably happen by default already anyway, but hey...)

      #+begin_src emacs-lisp
          (autoload 'markdown-mode "markdown-mode"
                    "Major mode for editing Markdown files" t)
      #+end_src

******* Use markdown mode for *.md files (and others)

	#+begin_src emacs-lisp
            (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
            (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
	#+end_src
***** Others
      
