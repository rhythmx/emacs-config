#+TITLE: Sean's Emacs Configuration


* Quick Start

#+begin_src bash
  cd $HOME
  mv .emacs.d .emacs.d.saved
  git clone github.com:rhythmx/emacs-config .emacs.d
#+end_src

  Embedded withing the text of this file is my actual emacs
  configuration. It uses org-babel mode to document everything inline.

* TODO Documentation

*** Cheatsheet
***** Helm

      Most any prompt launches a helm session.

      C-j   : Enter directory
      C-l   : Go up a directory
      C-SPC : mark file
      M-a   : mark all files

***** Helm-projectile (prefix: C-c p)

      Commands that operate on projects

      C-c p p : switch project
      C-c p f : find file in project 
      C-c p k : kill all buffers for project
      C-c p d : find dir in project
      C-c p c : compile project
      
***** Helm-gtags (prefix: C-c g)

      M-. : find a tag
      M-* : pop tag stack
      C-c g t : find a tag
      C-c g r : find references

***** Speedbar

      C-c s o : open speedbar
      C-c s c : close speedbar
      C-c s t : toggle speedbar

* Personal/Local Information

  Some emacs features need access to sensitive data like passwords,
  keys, etc. Since this configuration is being posted publicly, fake
  values are inserted later overridden by a file that will never be
  committed into source control.



*** Set up personalization vars

    #+begin_src emacs-lisp
      ;; Just load some defaults here for public commits 
      (setq user-full-name "Configure-Me")
      (setq user-mail-addr "plz@configure.me")
      (setq browse-url-generic-program "firefox")
    #+end_src

*** Load up personalization from a file

      If the PrivateConfig.org file exists, it will be evaluated but
      never commited to source control so it is suitable for storage
      of more sensitive info.

    #+begin_src emacs-lisp
      (if (file-readable-p "~/.emacs.d/PrivateConfig.org")
          (org-babel-load-file "~/.emacs.d/PrivateConfig.org"))
    #+end_src

* Runtime Environment

*** Setup

***** Helper functions

	  #+begin_src emacs-lisp
        ;; Look for a required system binary
        (defun sb:exe-in-path? (exefile)
          (not (not
                (locate-file exefile
                             (split-string (getenv "PATH") ":")
                             (if (eq system-type 'windows-nt) '(".exe") nil)
                             'file-executable-p))))
	  #+end_src

***** Setup $PATH 
	  
	  Load an interactive shell so all paths from .bashrc are
	  included. This helps especially for certain scripting
	  environments that dynamically configure their environment. 

	  #+begin_src emacs-lisp
		(defun sb:set-path-from-shell ()
		  (let ((path-from-shell (replace-regexp-in-string
								  "[ \t\n]*$"
								  ""
								  (shell-command-to-string "$SHELL --login -c 'echo $PATH'"))))
			(setenv "PATH" path-from-shell)
			(setq eshell-path-env path-from-shell) ; for eshell users
			(setq exec-path (split-string path-from-shell path-separator))))

		;; Windows can't handle the bash
		(if (not (eq system-type 'windows-nt))
			(sb:set-path-from-shell))
	  #+end_src


*** System Prerequisites

	We should check for any external programs required by later
	configuration. If they aren't present, handle this gracefully by
	presenting an error or warning message and quietly disabling the
	dependent functionality.

***** GNU Global (aka GTAGS)
	  
	  Global is basically a replacement for CTAGS. It indexes many
	  different types of source files and allows any editor to easily
	  add advanced source code navigation.

	  This configuration combines uses gtags & helm integration if
	  global is found on the system. If not, loading of this plugin is
	  skipped.

	  Install https://aur.archlinux.org/global.git and https://aur.archlinux.org/idutils.git

	  #+begin_src emacs-lisp
            (setq sb:has-gtags nil)
            (if (not (sb:exe-in-path? "gtags"))
                (warn "GNU Global does not appear to be installed. Disabling helm+gtags")
              (setq sb:has-gtags t))
	  #+end_src

***** GPG
	  
	  #+begin_src emacs-lisp
            (setq sb:has-gpg nil)
            (if (not (sb:exe-in-path? "gpg"))
                (warn "GPG does not appear to be installed. y u no SECURITY!?")
              (setq sb:has-gpg t))
	  #+end_src
	  
	  
***** LaTeX

	  pacman -Ss texlive-core texlive-latexextra

	  #+begin_src emacs-lisp
            (setq sb:has-latex nil)
            (if (not (sb:exe-in-path? "latex"))
                (warn "LaTeX is not installed. Disabling previews in org-mode")
              (setq sb:has-latex t))
	  #+end_src


***** Graphviz

	  #+begin_src emacs-lisp
            (setq sb:has-graphviz nil)
            (if (not (sb:exe-in-path? "dot"))
                (warn "graphviz is not installed. Inline dot previews will not be available")
              (setq sb:has-graphviz t))
	  #+end_src

*** Emacs Package Management

***** Configure & Init packages.el

      Set up the package menagement system and add some of the more
      popular public package repositories. This should sync with the
      remote servers to ensure package lists are up-to-date.

      #+begin_src emacs-lisp
      	(require 'package)

      	(add-to-list 'package-archives
                   	 '("melpa" . "http://melpa.milkbox.net/packages/"))

      	;; Some other package sources
      	;; '("elpa" . "http://tromey.com/elpa/") ;; ELPA is the official emacs repo (iirc?)
      	;; '("melpa-stable" . "http://melpa-stable.milkbox.net/packages/")
      	;; '("marmalade" . "http://marmalade-repo.org/packages/")

      	(package-initialize)
      #+end_src

***** Automatically install required packages

******* TODO Break this out better 

      You can modify the list below to include any packages that may be
      required later on during initialization. If any in the list are
      mising, they will be automatically installed.

      #+begin_src emacs-lisp
	(setq sb:package-list '())

	;; Some of my favorite themes
	(setq sb:package-list
	      (append sb:package-list
		      '(zenburn-theme
			cyberpunk-theme
			solarized-theme)))
		      
	;; Git integration
	(add-to-list 'sb:package-list 'magit)

	;; Lua source editing 
	(add-to-list 'sb:package-list 'lua-mode)                

	;; Haskell programming
	(add-to-list 'sb:package-list 'haskell-mode)

	;; Markdown syntax highlighting
	(add-to-list 'sb:package-list 'markdown-mode)

	;; Helm, better navigation and auto-complete  
	(add-to-list 'sb:package-list 'helm)

	;; "projects" (helper commands centered around git repos)
	(add-to-list 'sb:package-list 'projectile)                

	;; Integrate projectile into helm
	(add-to-list 'sb:package-list 'helm-projectile)

	;; Sidebar with directory listing and source outline 
	(add-to-list 'sb:package-list 'sr-speedbar)                

	;; Edit support for cmake (CMakeLists.txt)
	(add-to-list 'sb:package-list 'cmake-mode)

	;; Auto-complete (COMP-lete ANY)
	(add-to-list 'sb:package-list 'company)

	;; Pre-reqs for Lean mode (
	(setq sb:package-list
	      (append
	       sb:package-list
	       '(dash dash-functional f s )))

	;; Support editing source in source (like javascript inside html)
	(add-to-list 'sb:package-list 'mmm-mode)

	;; Not sure why this is here
	(add-to-list 'sb:package-list 'fill-column-indicator)         

	;; Read docs for this 
	(add-to-list 'sb:package-list 'flycheck)

	(if sb:has-gtags
	    (add-to-list 'sb:package-list
			 'helm-gtags))


	(dolist (package sb:package-list)
	  (when (not (package-installed-p package))
	    (package-refresh-contents)
	    (package-install package)))
      #+end_src

* Appearance
  
*** Select a better font. 

    Consolas is my favorite, but it's only available by default in
    Windows. However it's easy enough to install the Microsoft
    TrueType fonts in *nix.

    #+begin_src emacs-lisp
      ; List of fonts in order of preference
      (setq sb:preferred-fonts 
        '(
           "Consolas" 
           "Courier New" 
           "terminus" 
           "DejaVu Sans Mono"
        )
      )

      (defun sb:set-font (fontlist)
        (if (find-font  (font-spec :name (car fontlist)))

            ; Font exists, so set it
            (progn (set-frame-font (car fontlist))
                   (set-face-attribute 'default nil :height 120))

            ; Font not found, move on to next
            (progn (sb:set-font (cdr fontlist)))))

      (when (display-graphic-p)
            (sb:set-font sb:preferred-fonts))
    #+end_src

*** Remove all of the UI

    I don't like looking at a bunch of menus and scrollbars. This goes
    double when I'm on one of my smaller laptops where screen space is
    premium.

    #+begin_src emacs-lisp
      (scroll-bar-mode 0)
      (menu-bar-mode 0)
      (tool-bar-mode 0)
    #+end_src
    
*** Default Theme

    You can set per-mode themes later on

    #+begin_src emacs-lisp
      (load-theme 'cyberpunk t)
    #+end_src

*** Fullscreen mode [F11 key]

    Here I define a function that will toggle fullscreen mode on/off.

    #+begin_src emacs-lisp
      (defun toggle-fullscreen (&optional f)
        (interactive)
        (let ((current-value (frame-parameter nil 'fullscreen)))
          (set-frame-parameter nil 'fullscreen
            (if (equal 'fullboth current-value)
              (if (boundp 'old-fullscreen) old-fullscreen nil)
              (progn (setq old-fullscreen current-value)
                'fullboth)))))
      (global-set-key [f11] 'toggle-fullscreen)

      ; Uncomment to auto-fullscreen on startup
      ;(toggle-fullscreen)
    #+end_src

*** Transparency 

    #+begin_src emacs-lisp
    ;  (set-frame-parameter (selected-frame) 'alpha '(93 50))
    #+end_src

*** Show line and column numbers in status bar
    #+begin_src emacs-lisp
      (linum-mode 0)
      (line-number-mode 1)
      (column-number-mode 1)
    #+end_src
* Default Emacs Behaviors
*** No startup screen

    #+begin_src emacs-lisp
      (setq inhibit-startup-screen t)
    #+end_src

*** Get rid of annoying backup files (Foo.bar~)

    This forces all backup files into a single system-wide directory
    so that they don't pollute the whole filesytem.

    #+begin_src emacs-lisp
      (setq backup-by-copying t
	    backup-directory-alist '(("." . "~/.saves")))
    #+end_src

* Setup Modes


*** Helm (auto complete for most prompts)

    A good intro to helm is available at
    http://tuhdo.github.io/helm-intro.html

    #+begin_src emacs-lisp
      (require 'helm-config)
      (helm-mode 1)
      (global-set-key (kbd "C-x C-f") 'helm-find-files)
    #+end_src

*** WindMove

    Use [shift]+arrow to move the cursor from window to window instead
    of C-x o
    #+begin_src emacs-lisp
      (when (fboundp 'windmove-default-keybindings)
        (windmove-default-keybindings))
    #+end_src
    
*** Org System (Notes/Agendas/Journal/Wiki)

***** General Org Mode

******* Windmove overrides todo/prio keys
	#+begin_src emacs-lisp
          (defun sb:org-windmove-hook ()
            (when (fboundp 'windmove-default-keybindings)
              (add-hook 'org-shiftup-hook 'windmove-up)
              (add-hook 'org-shiftleft-hook 'windmove-left)
              (add-hook 'org-shiftdown-hook 'windmove-down)
              (add-hook 'org-shiftright-hook 'windmove-right)))

          (add-hook 'org-mode-hook 'sb:org-windmove-hook)
	#+end_src
******* Inline LaTeX

		Preview with "C-c C-x C-l"

		#+begin_src emacs-lisp
          ;; Make math mode previews look better
          (setq preview-scale-function 1.2)
          (setq preview-fast-conversion 'off)
          (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.6))
		#+end_src
***** Personalized 
      Load org system config from file share, if present. One day I
      might make an example layout and commit that publicly too. Until
      then, just use your imaginations ;)
      
      #+begin_src emacs-lisp

      	; Determine root dir of org system based on system type (because
      	; windows paths are retarded)

      	(cond ((eq system-type 'gnu/linux) 
               (setq sb:orgdir "/storage/organizer"))
              ((eq system-type 'windows-nt)
               (setq sb:orgdir "Z:\\organizer"))
              (t
               (setq sb:orgdir "/")))

      	; Define some helper functions to keep path specs small

      	(defun sb:orgdircat (filename)
          (concat (file-name-as-directory sb:orgdir)  filename))

      	; Check that guessed paths are sane, assume connectivity problem if not

      	(if (and (file-directory-p sb:orgdir)
               	 (file-exists-p (sb:orgdircat "config.org")))
          	(org-babel-load-file (sb:orgdircat "config.org"))
          (warn "File server does not seem to be accessible"))

      #+end_src

*** Development Environment

***** Global settings

******* Spaces, not tabs
		#+begin_src emacs-lisp
          (setq indent-tabs-mode nil)
		#+end_src
***** Projectile (Project Management)

      #+begin_src emacs-lisp
      	(projectile-global-mode)
      	(setq projectile-completion-system 'helm)
      	(helm-projectile-on)
      #+end_src

***** GTags (Source navigation)
	  
	  #+begin_src emacs-lisp
            (setq helm-gtags-ignore-case t
                  helm-gtags-auto-update t
                  helm-use-input-at-cursor t
                  helm-gtags-pulse-at-cursor t
                  helm-gtags-prefix-key "\C-cg"
                  helm-gtags-suggested-key-mapping t)

            (require 'helm-gtags)
            ;; Enable helm-gtags-mode
            (add-hook 'dired-mode-hook 'helm-gtags-mode)
            (add-hook 'eshell-mode-hook 'helm-gtags-mode)
            (add-hook 'c-mode-hook 'helm-gtags-mode)
            (add-hook 'c++-mode-hook 'helm-gtags-mode)
            (add-hook 'asm-mode-hook 'helm-gtags-mode)

            (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
            (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
            (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
            (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
            (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
            (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
	  #+end_src

***** SR Speedbar (file browser / code outlining)
	  
	  Quick-access file browser that runs along side of a normal
	  window supporting outlines of source code structure.

	  #+begin_src emacs-lisp
        ;; Display on the left
        (setq sr-speedbar-right-side nil)

        ;; Setup quick on/off keys
        (global-set-key "\C-cso" 'sr-speedbar-open)
        (global-set-key "\C-csc" 'sr-speedbar-close)
        (global-set-key "\C-cst" 'sr-speedbar-toggle)
	  #+end_src

***** Magit (Git integration)

******* Screw the gawdy highlighting of diff

      	#+begin_src emacs-lisp
          (eval-after-load "magit"
          	(setq magit-highlight-section 0))
      	#+end_src

******* Magit wants to hide release notes via elisp now?

      	#+begin_src emacs-lisp
          (setq magit-last-seen-setup-instructions "1.4.0")
      	#+end_src
***** Flyspell (spell checking)
	  #+begin_src emacs-lisp
        (add-hook 'flyspell-mode-hook 'flyspell-buffer)
	  #+end_src

***** C/C++
      
******* Appearance / Tabbing
      	#+begin_src emacs-lisp
          (defun sb:c-general-hook ()
          	
          	;; Same indent style as used in the linux src tree 
          	(c-set-style "linux")

          	;; Prefer spaces over tabs, width=4
          	(setq c-basic-offset 4
                  indent-tabs-mode nil
                  default-tab-width 4)
          	
          	;; Display line numbers
          	(linum-mode)
          	(setq linum-format "%4d \u2502")

          	)

          (add-hook 'c-mode-hook 'sb:c-general-hook)
          (add-hook 'c++-mode-hook 'sb:c-general-hook)
      	#+end_src

******* Spell checking for comments, strings, etc
	    #+begin_src emacs-lisp
		  (add-hook 'c-mode-hook 'flyspell-prog-mode)
		  (add-hook 'c-mode-hook 'flyspell-buffer)
		  (add-hook 'c++-mode-hook 'flyspell-prog-mode)
		  (add-hook 'c++-mode-hook 'flyspell-buffer)
	    #+end_src

******* CEDET
		#+begin_src emacs-lisp
          (require 'cc-mode)
          (require 'semantic)

          (global-semanticdb-minor-mode 1)
          (global-semantic-idle-scheduler-mode 1)

          (defun sb:c-autocompletion ()
            (semantic-mode 1)
            (company-mode))

          (add-hook 'c-mode-hook 'sb:c-autocompletion)
          (add-hook 'c++-mode-hook 'sb:c-autocompletion)
		#+end_src
***** Assembler

      #+begin_src emacs-lisp
        (defun sb:asm-mode-hook ()
          (setq c-basic-offset 4
                indent-tabs-mode nil
                default-tab-width 4
                tab-stop-list (quote (4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 
                                        64 68 72 76 80 84 88 92 96 100 104 108 112 116 120))
                ))

        (add-hook 'asm-mode-hook 'sb:asm-mode-hook)

        ;; Spell checking
        (add-hook 'asm-mode-hook 'flyspell-prog-mode)
      #+end_src

***** Haskell

      
******* Doc mode

      	#+begin_src emacs-lisp
          ;; Not totally sure what doc mode is yet... sounds like a good enough idea
          (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
      	#+end_src

******* Indentation

      	#+begin_src emacs-lisp
          ;;(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
          (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
          ;;(add-hook 'haskell-mode-hook 'turn-on-haskell-simple-indent) 
      	#+end_src

******* Spell check
	#+begin_src emacs-lisp
          (add-hook 'haskell-mode-hook 'flyspell-prog-mode)
	#+end_src
***** Agda

      #+begin_src emacs-lisp
        (if (executable-find "agda-mode")
            (load-file (let ((coding-system-for-read 'utf-8))
                         (shell-command-to-string "agda-mode locate"))))

        (custom-set-variables
         '(agda2-include-dirs 
           '( "/home/sean/code/agda-stdlib/src"
              "/home/sean/.cabal/share/x86_64-linux-ghc-7.10.1/Agda-2.4.2.3/lib/prim/"
              "/home/sean/code/agda-prelude/src"
              "." )))
        
        ;; Spell checker
        (add-hook 'agda-mode-hook 'flyspell-prog-mode)
      #+end_src
	  	  
***** Emacs Lisp
      #+begin_src emacs-lisp
        (defun sb:lisp-mode-hook ()

          ;; Display line numbers
          (linum-mode)
          (setq linum-format "%4d \u2502"))

        (add-hook 'emacs-lisp-mode-hook 'sb:lisp-mode-hook)

        ;; Spell checker
        (add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode)
      #+end_src

***** LaTeX

      Don't "word process", edit src.

******* Spell checking
	#+begin_src emacs-lisp
          (add-hook 'LaTeX-mode-hook 'flyspell-mode)
          (add-hook 'LaTeX-mode-hook 'flyspell-buffer)
	#+end_src
******* AUCTeX (disabled)

	    Disabled for now
	    
        #+begin_src emacs-lisp

          ;(load "auctex.el" nil t t)
          ;(load "preview-latex.el" nil t t)

          ;(require 'flymake)

          ;(defun flymake-get-tex-args (file-name)
          ;  (list "pdflatex"
          ;  (list "-file-line-error" "-draftmode" "-interaction=nonstopmode" file-name)))

          ;(add-hook 'LaTeX-mode-hook 'flymake-mode)

          ;(setq ispell-program-name "aspell") ; could be ispell as well, depending on your preferences
          ;(setq ispell-dictionary "english") ; this can obviously be set to any language your spell-checking program supports

          ;(add-hook 'LaTeX-mode-hook 'flyspell-mode)
          ;(add-hook 'LaTeX-mode-hook 'flyspell-buffer)

          ;(setq TeX-auto-save t)
          ;(setq TeX-parse-self t)
          ;(setq TeX-save-query nil)

        #+end_src
***** TXT
******* Spell checking
        #+begin_src emacs-lisp
          (add-hook 'text-mode-hook 'flyspell-mode)
          (add-hook 'text-mode-hook 'flyspell-buffer)
        #+end_src
***** CMake
	  #+begin_src emacs-lisp
        ;; Note that cmake goes at the front of the list because it needs to
        ;; take precedence over *.txt
        (setq auto-mode-alist
              (append
               '(("CMakeLists\\.txt\\'" . cmake-mode))
               '(("\\.cmake\\'" . cmake-mode))
               auto-mode-alist))
	  #+end_src

***** Lean

	  #+begin_src emacs-lisp
                ;; Set up lean-root path


                (setq lean-rootdir "~/code/lean")  ;; <=== YOU NEED TO MODIFY THIS

                (if (file-exists-p (concat lean-rootdir "/src/emacs/lean-mode.el"))
                    (progn
                      (setq-local lean-emacs-path
                                  (concat (file-name-as-directory lean-rootdir)
                                          (file-name-as-directory "src")
                                          "emacs"))
                      (add-to-list 'load-path (expand-file-name lean-emacs-path))
                      (require 'lean-mode)))

                (defun sb:lean-mode-hook ()
                  
                  ;; Display line numbers
                  (linum-mode)
                  (setq linum-format "%4d \u2502")
                  (local-set-key (kbd "\C-c\C-c") 
                                 (lambda ()
                                   (interactive)
                                   (save-buffer)
                                   (let ((current-prefix-arg ""))
                                     (lean-execute nil))))
                  (local-set-key (kbd "\C-c f") 
                                 (lambda ()
                                   (interactive)
                                   (lean-flycheck-toggle-use)
                                   (message "Lean Flychecking is %s"
                                            (if lean-flycheck-use "ON" "OFF")))))
                  
                (add-hook 'lean-mode-hook 'sb:lean-mode-hook)

                (setq lean-flycheck-checker-options '(
                                                      "-M"
                                                      "4096"
                                                      "--keep-going" "999"
                                                      "--flycheck"
                                                      "--flycheck-max-messages" "100"))



	  #+end_src

*** GnuPG / EasyPG
***** GPG Agent Issues
      
      Emacs and GPG2 don't play nicely together. Almost impossible
      to get a working config going for plain terminal mode and
      automatic-decryption.

      Except... I have no idea how to do this :(

      Emacs and GPG2/pinentry can not share a tty. Also, pinentry is
      impossible to disable from the command line in GPG2.

      #+begin_src emacs-lisp

      #+end_src

*** Markdown 

    
***** Setup autoload

    (this should probably happen by default already anyway, but hey...)

    #+begin_src emacs-lisp
	(autoload 'markdown-mode "markdown-mode"
		  "Major mode for editing Markdown files" t)
    #+end_src

***** Use markdown mode for *.md files (and others)

      #+begin_src emacs-lisp
	  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
	  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
      #+end_src
*** Others
***** eshell
	  #+begin_src emacs-lisp
        ;; Eshell-prompt (credit to thierryvolpiatto via https://github.com/emacs-helm/helm/issues/1153))
        (setq eshell-prompt-function
              #'(lambda nil
                  (concat
                   (getenv "USER")
                   "@"
                   (system-name)
                   ":"
                   (abbreviate-file-name (eshell/pwd))
                   (if (= (user-uid) 0) " # " " $ "))))

        ;; Compatibility 24.2/24.3
        (unless (fboundp 'eshell-pcomplete)
          (defalias 'eshell-pcomplete 'pcomplete))
        (unless (fboundp 'eshell-complete-lisp-symbol)
          (defalias 'eshell-complete-lisp-symbol 'lisp-complete-symbol))

        (add-hook 'eshell-mode-hook #'(lambda ()
                                        ;; Helm completion with pcomplete
                                        (setq eshell-cmpl-ignore-case t)
                                        (eshell-cmpl-initialize)
                                        (define-key eshell-mode-map [remap eshell-pcomplete] 'helm-esh-pcomplete)
                                        ;; Helm lisp completion
                                        (define-key eshell-mode-map [remap eshell-complete-lisp-symbol] 'helm-lisp-completion-at-point)
                                        ;; Helm completion on eshell history.
                                        (define-key eshell-mode-map (kbd "M-p") 'helm-eshell-history)
                                        ;; Eshell prompt
                                        (set-face-attribute 'eshell-prompt nil :foreground "DeepSkyBlue")
                                        ;; Allow yanking right now instead of returning "Mark set"
                                        ;;(push-mark)
                                        ))

        ;; Eshell history size
        (setq eshell-history-size 1000) ; Same as env var HISTSIZE.

        ;; Eshell-banner
        (setq eshell-banner-message (format "%s %s\nwith Emacs %s on %s"
                                            (propertize
                                             "Eshell session started on"
                                             'face '((:foreground "Goldenrod")))
                                            (propertize
                                             (format-time-string "%c")
                                             'face '((:foreground "magenta")))
                                            (propertize emacs-version
                                                        'face '((:foreground "magenta")))
                                            (propertize
                                             (with-temp-buffer
                                               (call-process "uname" nil t nil "-r")
                                               (buffer-string))
                                             'face '((:foreground "magenta")))))
	  #+end_src
***** ido | ido-ubiquitous (DEPRECATED by helm)

      interactive auto-completion for find-file, M-x, etc

      #+begin_src emacs-lisp
      ;;  (ido-mode t)
      ;;  (ido-ubiquitous-mode)
      #+end_src
