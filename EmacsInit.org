#+TITLE: Sean's Emacs Configuration


* Quick Start

#+begin_src bash
  cd $HOME
  mv .emacs.d .emacs.d.saved
  git clone github.com:rhythmx/emacs-config .emacs.d
#+end_src

  Embedded withing the text of this file is my actual emacs
  configuration. It uses org-babel mode to document everything inline.


* Personal Information

  Some emacs features need access to sensitive data like passwords,
  keys, etc. Since this configuration is being posted publicly, fake
  values are inserted later overridden by a file that will never be
  committed into source control.



*** Set up personalization vars

    #+begin_src emacs-lisp
      ;; Just load some defaults here for public commits 
      (setq user-full-name "Configure-Me")
      (setq user-mail-addr "plz@configure.me")
      (setq browse-url-generic-program "firefox")
    #+end_src

*** Load up personalization from a file

      If the PrivateConfig.org file exists, it will be evaluated but
      never commited to source control so it is suitable for storage
      of more sensitive info.

    #+begin_src emacs-lisp
      (if (file-readable-p "~/.emacs.d/PrivateConfig.org")
          (org-babel-load-file "~/.emacs.d/PrivateConfig.org"))
    #+end_src

* Package Management

*** Configure & Init packages.el

    Set up the package menagement system and add some of the more
    popular public package repositories. This should sync with the
    remote servers to ensure package lists are up-to-date.

    #+begin_src emacs-lisp
      (require 'package)

      (add-to-list 'package-archives
                   '("melpa" . "http://melpa.milkbox.net/packages/"))

      ;; Some other package sources
      ;; '("elpa" . "http://tromey.com/elpa/") ;; ELPA is the official emacs repo (iirc?)
      ;; '("melpa-stable" . "http://melpa-stable.milkbox.net/packages/")
      ;; '("marmalade" . "http://marmalade-repo.org/packages/")

      (package-initialize)
    #+end_src

*** Automatically install required packages

    You can modify the list below to include any packages that may be
    required later on during initialization. If any in the list are
    mising, they will be automatically installed.

    #+begin_src emacs-lisp
      (setq sb:package_list '(zenburn-theme
                              cyberpunk-theme
                              solarized-theme
                              magit 
                              lua-mode
                              haskell-mode
                              markdown-mode
                              helm
                              projectile
                              helm-projectile
                              ; helm-gtags
                              sr-speedbar
                              cmake-mode
                              company
                              dash
                              dash-functional
                              f
                              s
                              flycheck
                              fill-column-indicator
                              lua-mode
                              mmm-mode))

      (dolist (package sb:package_list)
        (when (not (package-installed-p package))
          (package-refresh-contents)
          (package-install package)))
    #+end_src

*** Load PATH from .bashrc (if it makes sense on current platform)

    #+begin_src emacs-lisp
      (defun set-exec-path-from-shell-PATH ()
        (let ((path-from-shell (replace-regexp-in-string
                                "[ \t\n]*$"
                                ""
                                (shell-command-to-string "$SHELL --login -c 'echo $PATH'"))))
          (setenv "PATH" path-from-shell)
          (setq eshell-path-env path-from-shell) ; for eshell users
          (setq exec-path (split-string path-from-shell path-separator))))

      (if (or (eq system-type 'darwin) (eq system-type 'gnu/linux))
          (set-exec-path-from-shell-PATH)) 
    #+end_src

* Appearance
  
*** Select a better font. 

    Consolas is my favorite, but it's only available by default in
    Windows. However it's easy enough to install the Microsoft
    TrueType fonts in *nix.

    #+begin_src emacs-lisp
      ; List of fonts in order of preference
      (setq sb:preferred-fonts 
        '(
           "Consolas" 
           "Courier New" 
           "terminus" 
           "DejaVu Sans Mono"
        )
      )

      (defun sb:set-font (fontlist)
        (if (find-font  (font-spec :name (car fontlist)))

            ; Font exists, so set it
            (progn (set-frame-font (car fontlist))
                   (set-face-attribute 'default nil :height 120))

            ; Font not found, move on to next
            (progn (sb:set-font (cdr fontlist)))))

      (when (display-graphic-p)
            (sb:set-font sb:preferred-fonts))
    #+end_src

*** Remove all of the UI

    I don't like looking at a bunch of menus and scrollbars. This goes
    double when I'm on one of my smaller laptops where screen space is
    premium.

    #+begin_src emacs-lisp
      (scroll-bar-mode 0)
      (menu-bar-mode 0)
      (tool-bar-mode 0)
    #+end_src
    
*** Default Theme

    You can set per-mode themes later on

    #+begin_src emacs-lisp
      (load-theme 'solarized-dark t)
    #+end_src

*** Fullscreen mode [F11 key]

    Here I define a function that will toggle fullscreen mode on/off.

    #+begin_src emacs-lisp
      (defun toggle-fullscreen (&optional f)
        (interactive)
        (let ((current-value (frame-parameter nil 'fullscreen)))
          (set-frame-parameter nil 'fullscreen
            (if (equal 'fullboth current-value)
              (if (boundp 'old-fullscreen) old-fullscreen nil)
              (progn (setq old-fullscreen current-value)
                'fullboth)))))
      (global-set-key [f11] 'toggle-fullscreen)

      ; Uncomment to auto-fullscreen on startup
      ;(toggle-fullscreen)
    #+end_src

*** Transparency 

    #+begin_src emacs-lisp
      (set-frame-parameter (selected-frame) 'alpha '(93 50))
    #+end_src

*** Show line and column numbers in status bar
    #+begin_src emacs-lisp
      (linum-mode 0)
      (line-number-mode 1)
      (column-number-mode 1)
    #+end_src
* Default Emacs Behaviors
*** No startup screen

    #+begin_src emacs-lisp
      (setq inhibit-startup-screen t)
    #+end_src

*** Get rid of annoying backup files (Foo.bar~)

    This forces all backup files into a single system-wide directory
    so that they don't pollute the whole filesytem.

    #+begin_src emacs-lisp
      (setq backup-by-copying t
	    backup-directory-alist '(("." . "~/.saves")))
    #+end_src


* Setup Modes


*** Helm (auto complete for most prompts)

    A good intro to helm is available at
    http://tuhdo.github.io/helm-intro.html

    #+begin_src emacs-lisp
      (require 'helm-config)
      (helm-mode 1)
    #+end_src

*** Org System (Notes/Agendas/Journal/Wiki)

***** General Org Mode

******* Inline LaTeX

		#+begin_src emacs-lisp
          ;; Make math mode previews look better
          (setq preview-scale-function 1.2)
          (setq preview-fast-conversion 'off)
          (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.6))
		#+end_src
***** Personalized 
      Load org system config from file share, if present. One day I
      might make an example layout and commit that publicly too. Until
      then, just use your imaginations ;)
      
      #+begin_src emacs-lisp

      	; Determine root dir of org system based on system type (because
      	; windows paths are retarded)

      	(cond ((eq system-type 'gnu/linux) 
               (setq sb:orgdir "/storage/organizer"))
              ((eq system-type 'windows-nt)
               (setq sb:orgdir "Z:\\organizer"))
              (t
               (setq sb:orgdir "/")))

      	; Define some helper functions to keep path specs small

      	(defun sb:orgdircat (filename)
          (concat (file-name-as-directory sb:orgdir)  filename))

      	; Check that guessed paths are sane, assume connectivity problem if not

      	(if (and (file-directory-p sb:orgdir)
               	 (file-exists-p (sb:orgdircat "config.org")))
          	(org-babel-load-file (sb:orgdircat "config.org"))
          (warn "File server does not seem to be accessible"))

      #+end_src

*** Development Environment

***** Global settings

******* Spaces, not tabs
		#+begin_src emacs-lisp
          (setq indent-tabs-mode nil)
		#+end_src
***** Projectile (Project Management)

      #+begin_src emacs-lisp
      	(projectile-global-mode)
      	(setq projectile-completion-system 'helm)
      	(helm-projectile-on)
      #+end_src

***** GTags (Source navigation)
	  
	  #+begin_src emacs-lisp
      	;(setq helm-gtags-ignore-case t
        ;      helm-gtags-auto-update t
        ;      helm-use-input-at-cursor t
        ;      helm-gtags-pulse-at-cursor t
        ;      helm-gtags-prefix-key "\C-cg"
        ;      helm-gtags-suggested-key-mapping t)

      	;(require 'helm-gtags)
      	;;; Enable helm-gtags-mode
      	;(add-hook 'dired-mode-hook 'helm-gtags-mode)
      	;(add-hook 'eshell-mode-hook 'helm-gtags-mode)
      	;(add-hook 'c-mode-hook 'helm-gtags-mode)
      	;(add-hook 'c++-mode-hook 'helm-gtags-mode)
      	;(add-hook 'asm-mode-hook 'helm-gtags-mode)
	  #+end_src

***** SR Speedbar (file browser / code outlining)
	  
	  Quick-access file browser that runs along side of a normal
	  window supporting outlines of source code structure.

	  #+begin_src emacs-lisp
        ;; Display on the left
        (setq sr-speedbar-right-side nil)

        ;; Setup quick on/off keys
        (global-set-key "\C-cso" 'sr-speedbar-open)
        (global-set-key "\C-csc" 'sr-speedbar-close)
        (global-set-key "\C-cst" 'sr-speedbar-toggle)
	  #+end_src

***** Magit (Git integration)

******* Screw the gawdy highlighting of diff

      	#+begin_src emacs-lisp
          (eval-after-load "magit"
          	(setq magit-highlight-section 0))
      	#+end_src

******* Magit wants to hide release notes via elisp now?

      	#+begin_src emacs-lisp
          (setq magit-last-seen-setup-instructions "1.4.0")
      	#+end_src
***** Flyspell (spell checking)
	  #+begin_src emacs-lisp
        (add-hook 'flyspell-mode-hook 'flyspell-buffer)
	  #+end_src

***** C/C++
      
******* Appearance / Tabbing
      	#+begin_src emacs-lisp
          (defun sb:c-general-hook ()
          	
          	;; Same indent style as used in the linux src tree 
          	(c-set-style "linux")

          	;; Prefer spaces over tabs, width=4
          	(setq c-basic-offset 4
                  indent-tabs-mode nil
                  default-tab-width 4)
          	
          	;; Display line numbers
          	(linum-mode)
          	(setq linum-format "%4d \u2502")

          	)

          (add-hook 'c-mode-hook 'sb:c-general-hook)
          (add-hook 'c++-mode-hook 'sb:c-general-hook)
      	#+end_src

******* Spell checking for comments, strings, etc
	    #+begin_src emacs-lisp
		  (add-hook 'c-mode-hook 'flyspell-prog-mode)
		  (add-hook 'c-mode-hook 'flyspell-buffer)
		  (add-hook 'c++-mode-hook 'flyspell-prog-mode)
		  (add-hook 'c++-mode-hook 'flyspell-buffer)
	    #+end_src

******* CEDET
		#+begin_src emacs-lisp
          (require 'cc-mode)
          (require 'semantic)

          (global-semanticdb-minor-mode 1)
          (global-semantic-idle-scheduler-mode 1)

          (defun sb:c-autocompletion ()
            (semantic-mode 1)
            (company-mode))

          (add-hook 'c-mode-hook 'sb:c-autocompletion)
          (add-hook 'c++-mode-hook 'sb:c-autocompletion)
		#+end_src
***** Assembler

      #+begin_src emacs-lisp
        (defun sb:asm-mode-hook ()
          (setq c-basic-offset 4
                indent-tabs-mode nil
                default-tab-width 4
                tab-stop-list (quote (4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 
                                        64 68 72 76 80 84 88 92 96 100 104 108 112 116 120))
                ))

        (add-hook 'asm-mode-hook 'sb:asm-mode-hook)

        ;; Spell checking
        (add-hook 'asm-mode-hook 'flyspell-prog-mode)
      #+end_src

***** Haskell

      
******* Doc mode

      	#+begin_src emacs-lisp
          ;; Not totally sure what doc mode is yet... sounds like a good enough idea
          (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
      	#+end_src

******* Indentation

      	#+begin_src emacs-lisp
          ;;(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
          (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
          ;;(add-hook 'haskell-mode-hook 'turn-on-haskell-simple-indent) 
      	#+end_src

******* Spell check
	#+begin_src emacs-lisp
          (add-hook 'haskell-mode-hook 'flyspell-prog-mode)
	#+end_src
***** Agda

      #+begin_src emacs-lisp
        (if (executable-find "agda-mode")
            (load-file (let ((coding-system-for-read 'utf-8))
                         (shell-command-to-string "agda-mode locate"))))

        (custom-set-variables
         '(agda2-include-dirs 
           '( "/home/sean/code/agda-stdlib/src"
              "/home/sean/.cabal/share/x86_64-linux-ghc-7.10.1/Agda-2.4.2.3/lib/prim/"
              "/home/sean/code/agda-prelude/src"
              "." )))
        
        ;; Spell checker
        (add-hook 'agda-mode-hook 'flyspell-prog-mode)
      #+end_src
	  	  
***** Emacs Lisp
      #+begin_src emacs-lisp
        (defun sb:lisp-mode-hook ()

          ;; Display line numbers
          (linum-mode)
          (setq linum-format "%4d \u2502"))

        (add-hook 'emacs-lisp-mode-hook 'sb:lisp-mode-hook)

        ;; Spell checker
        (add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode)
      #+end_src

***** LaTeX

      Don't "word process", edit src.

******* Spell checking
	#+begin_src emacs-lisp
          (add-hook 'LaTeX-mode-hook 'flyspell-mode)
          (add-hook 'LaTeX-mode-hook 'flyspell-buffer)
	#+end_src
******* AUCTeX (disabled)

	    Disabled for now
	    
        #+begin_src emacs-lisp

          ;(load "auctex.el" nil t t)
          ;(load "preview-latex.el" nil t t)

          ;(require 'flymake)

          ;(defun flymake-get-tex-args (file-name)
          ;  (list "pdflatex"
          ;  (list "-file-line-error" "-draftmode" "-interaction=nonstopmode" file-name)))

          ;(add-hook 'LaTeX-mode-hook 'flymake-mode)

          ;(setq ispell-program-name "aspell") ; could be ispell as well, depending on your preferences
          ;(setq ispell-dictionary "english") ; this can obviously be set to any language your spell-checking program supports

          ;(add-hook 'LaTeX-mode-hook 'flyspell-mode)
          ;(add-hook 'LaTeX-mode-hook 'flyspell-buffer)

          ;(setq TeX-auto-save t)
          ;(setq TeX-parse-self t)
          ;(setq TeX-save-query nil)

        #+end_src
***** TXT
******* Spell checking
        #+begin_src emacs-lisp
          (add-hook 'text-mode-hook 'flyspell-mode)
          (add-hook 'text-mode-hook 'flyspell-buffer)
        #+end_src
***** CMake
	  #+begin_src emacs-lisp
        ;; Note that cmake goes at the front of the list because it needs to
        ;; take precedence over *.txt
        (setq auto-mode-alist
              (append
               '(("CMakeLists\\.txt\\'" . cmake-mode))
               '(("\\.cmake\\'" . cmake-mode))
               auto-mode-alist))
	  #+end_src
***** Lean

	  #+begin_src emacs-lisp
            ;; Set up lean-root path


            (setq lean-rootdir "~/code/lean")  ;; <=== YOU NEED TO MODIFY THIS

            (if (file-exists-p (concat lean-rootdir "/src/emacs/lean-mode.el"))
                (progn
                  (setq-local lean-emacs-path
                              (concat (file-name-as-directory lean-rootdir)
                                      (file-name-as-directory "src")
                                      "emacs"))
                  (add-to-list 'load-path (expand-file-name lean-emacs-path))
                  (require 'lean-mode)))

        (defun sb:lean-mode-hook ()

          ;; Display line numbers
          (linum-mode)
          (setq linum-format "%4d \u2502")
          (local-set-key (kbd "\C-c\C-c") 
                         (lambda ()
                           (interactive)
                           (save-buffer)
                           (let ((current-prefix-arg ""))
                             (lean-execute nil)))))
          
        (add-hook 'lean-mode-hook 'sb:lean-mode-hook)
	  #+end_src

*** GnuPG / EasyPG
***** GPG Agent Issues
      
      Emacs and GPG2 don't play nicely together. Almost impossible
      to get a working config going for plain terminal mode and
      automatic-decryption.

      Except... I have no idea how to do this :(

      Emacs and GPG2/pinentry can not share a tty. Also, pinentry is
      impossible to disable from the command line in GPG2.

      #+begin_src emacs-lisp

      #+end_src

*** Markdown 

    
***** Setup autoload

    (this should probably happen by default already anyway, but hey...)

    #+begin_src emacs-lisp
	(autoload 'markdown-mode "markdown-mode"
		  "Major mode for editing Markdown files" t)
    #+end_src

***** Use markdown mode for *.md files (and others)

      #+begin_src emacs-lisp
	  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
	  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
      #+end_src
*** Others
***** ido | ido-ubiquitous (DEPRECATED by helm)

      interactive auto-completion for find-file, M-x, etc

      #+begin_src emacs-lisp
      ;;  (ido-mode t)
      ;;  (ido-ubiquitous-mode)
      #+end_src
