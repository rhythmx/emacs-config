* Emacs Config

  QUICKSTART:

#+begin_src bash
  cd $HOME
  mv .emacs.d .emacs.d.saved
  git clone github.com:rhythmx/emacs-config .emacs.d
#+end_src

  Embedded withing the text of this file is my actual emacs
  configuration. It uses org-babel mode to document everything inline.


*** Personal Information
***** Set up personalization vars

      Things that currently need to be defined by the private file in
      order for the rest of this config to function:

#+begin_src emacs-lisp
; Just load some defaults here for public commits 
(setq user-full-name "Configure-Me")
(setq user-mail-addr "plz@configure.me")
(setq doc-directory "~/Documents")
#+end_src

***** Load up personalization from a file

      No reason any of this ever needs to get committed to github.

      If the PrivateConfig.org file exists, it will be evaluated but
      never commited to source control so it is suitable for storage
      of more sensitive info.

#+begin_src emacs-lisp
(if (file-readable-p "~/.emacs.d/PrivateConfig.org")
    (org-babel-load-file "~/.emacs.d/PrivateConfig.org"))
#+end_src

*** Package Management

***** Configure & Init packages.el

      Set up the package menagement system and add some of the more
      popular public package repositories. This should sync with the
      remote servers to ensure package lists are up-to-date.

#+begin_src emacs-lisp
(require 'package)

; ELPA is the official emacs repo (iirc?)
(add-to-list 'package-archives
             '("elpa" . "http://tromey.com/elpa/"))

(add-to-list 'package-archives
             '("melpa-stable" . "http://melpa-stable.milkbox.net/packages/"))

; Marmalade is also very popular
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/"))

(package-initialize)
#+end_src

***** Automatically install required packages

      You can modify the list below to include any packages that may
      be required later on during initialization. If any in the list
      are mising, they will be automatically installed.

#+begin_src emacs-lisp
(setq sb:package_list
  '(
      cyberpunk-theme
      magit 
      ido-ubiquitous
      lua-mode
      haskell-mode
   )
)

(dolist (package sb:package_list)
  (when (not (package-installed-p package))
    (package-refresh-contents)
    (package-install package)))
#+end_src

*** Appearance
    
***** Select a better font. 

Consolas is my favorite, but it's only available
by default in Windows. However it's easy enough to install the
Microsoft TrueType fonts in *nix.

#+begin_src emacs-lisp
; List of fonts in order of preference
(setq sb:preferred-fonts 
  '(
     "Consolas" 
     "Courier New" 
     "terminus" 
     "DejaVu Sans Mono"
  )
)

(defun sb:set-font (fontlist)
  (if (find-font  (font-spec :name (car fontlist)))

      ; Font exists, so set it
      (progn (set-frame-font (car fontlist))
             (set-face-attribute 'default nil :height 120))

      ; Font not found, move on to next
      (progn (sb:set-font (cdr fontlist)))))

(when (display-graphic-p)
      (sb:set-font sb:preferred-fonts))
#+end_src

***** Remove all of the UI

I don't like looking at a bunch of menus and scrollbars. This goes
double when I'm on one of my smaller laptops where screen space is premium.

#+begin_src emacs-lisp
    (scroll-bar-mode 0)
    (menu-bar-mode 0)
    (tool-bar-mode 0)
#+end_src

***** No startup screen

#+begin_src elisp
  (setq inhibit-startup-message t)
#+end_src
			
***** Default Theme

      You can set per-mode themes later on

#+begin_src emacs-lisp
(load-theme 'cyberpunk t)
#+end_src

***** Fullscreen mode [F11 key]

      Here I define a function that will toggle fullscreen mode
      on/off. 

#+begin_src emacs-lisp
(defun toggle-fullscreen (&optional f)
  (interactive)
  (let ((current-value (frame-parameter nil 'fullscreen)))
    (set-frame-parameter nil 'fullscreen
      (if (equal 'fullboth current-value)
        (if (boundp 'old-fullscreen) old-fullscreen nil)
        (progn (setq old-fullscreen current-value)
          'fullboth)))))
(global-set-key [f11] 'toggle-fullscreen)

; Uncomment to auto-fullscreen on startup
;(toggle-fullscreen)
#+end_src

*** Setup Individual Modes

***** Default Behavior
******* Get rid of backup files (Foo.bar~)

	This forces all backup files into a single system-wide
	directory so that they don't pollute the whole filesytem.

#+begin_src emacs-lisp
    (setq
          backup-by-copying t
	  backup-directory-alist '(("." . "~/.saves")))
#+end_src

******* Line and column numbers in status bar
			#+begin_src emacs-lisp
(linum-mode 0)
(line-number-mode 1)
(column-number-mode 1)
			#+end_src
***** ido | ido-ubiquitous

      IDO MODE IS THE SHIT. (aka interactive auto-completion for find-file, M-x, etc)

#+begin_src emacs-lisp
(ido-mode t)
(ido-ubiquitous-mode)
#+end_src

***** magit-mode

******* Screw the gawdy highlighting of diff

	#+begin_src emacs-lisp
          (eval-after-load "magit"
            ;; no highlight
             (setq magit-highlight-section 0))
	#+end_src

******* Magit wants to hide release notes via elisp now?

	#+begin_src emacs-lisp
	  (setq magit-last-seen-setup-instructions "1.4.0")
	#+end_src

******* 
***** Org Mode
******* Top level org init

#+begin_src
(require 'org-install)
#+end_src


******* Org Appearance
********* Hide leading stars in org documents (clean mode)

#+begin_src emacs-lisp
(custom-set-variables
  '(org-hide-leading-stars t))
#+end_src

********* Only use odd numbered levels
#+begin_src emacs-lisp
(custom-set-variables
  '(org-odd-levels-only t))
#+end_src
	  

******* Org Directory
	
	This always points to my file-server. Later on, I'll work on
	some VPN solution so that this is transparent when I'm on a
	remote network.

	The variable 'doc-directory must be defined before
	this. Here, it is defined by PrivateConfig.el.
	
	Also, while we're at it, let's define a helper function to
	constuct a well-formed file name with 'sb:doc-directory at the
	beginning to save some typing later.

#+begin_src emacs-lisp
(defun sb:orgdircat (filename)
  (concat doc-directory "/org/" filename))
#+end_src


******* Capture (quick notes)

	Capture mode allows you to (from anywhere in emacs) to type a
	shortcut (here "C-c c") that open a little mini buffer to jot
	a note in. It automatically files this in a configurable
	location. The idea is if you have some idea or a note that is
	unrelated to what you are currently working on, you can
	"capture" it with as little interruption as possible.

********* Setup

	  Point all capture at "$ORGDIR/capture.org" and bind capture to
	  "C-c c".
	  
	  #+begin_src emacs-lisp
	  (setq org-default-notes-file (sb:orgdircat "capture.org"))
	  (global-set-key "\C-cc" 'org-capture)
          (global-set-key "\C-ca" 'org-agenda)
	  #+end_src

	  
********* Templates

	  A template can be run by "C-c c [template key]".  This
	  probably need some more work, but this is a reasonable
	  default set of default templates. Currently [t]odo,
	  [j]ournal, and [g]rocery list.

	  #+begin_src emacs-lisp
	  (setq org-capture-templates
	    '(("t" "Todo" entry (file+headline (sb:orgdircat "capture.org") "Tasks")
	           "* TODO %?\n  %i\n  %a")
              ("l" "Link" entry (file+headline (sb:orgdircat "capture.org") "Links")
	           "* TODO %?\n")
              ("p" "Password" table-line (file+headline (sb:orgdircat "passwords.org.gpg") "Passwords")
                   "* %?\n")
              ("j" "Journal" entry (file+datetree (sb:orgdircat "journal.org.gpg"))
                   "* %?\nEntered on %U\n  %i\n  %a")
              ("q" "Quote" entry (file+headline (sb:orgdircat "quotes.org") "New Quotes")
                   "* [cite]\n  %?\n")
              ("g" "Grocery" checkitem (file+olp (sb:orgdircat "personal.org") "Shopping Lists" "Groceries")
                   "  + [ ] %?\n")
              ("s" "Shopping" checkitem (file+olp (sb:orgdircat "personal.org") "Shopping Lists" "General")
                   "  + [ ] %?\n")))
	  #+end_src
	  
	  
********* Refile Targets

	  The capture mode is great for dumping tiny little notes into
	  bins for later processing, but you should really go back
	  over than and better organize all that later. This is
	  "refile". Here we configure certain places and files that
	  should show up when refiling notes.

	  (... moved to local config ...)
	 
******* TODO Work on full major mode support for org code blocks
******* Fontify for org-babel blocks (deprecated)
	
	This makes syntax highlighting function inside individual code
	blocks in org mode. Edit: Fuck this approach

#+begin_src elisp

;(setq org-src-fontify-natively t)

;(defface org-block-begin-line
;  '((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
;  "Face used for the line delimiting the begin of source blocks.")

;(defface org-block-background
;  '((t (:background "#dddddd")))
;  "Face used for the source block background.")

;(defface org-block-end-line
;  '((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
;  "Face used for the line delimiting the end of source blocks.")

#+end_src

******* Setup org-babel
 
#+begin_src elisp
  ; Some initial langauges we want org-babel to support
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (sh . t)
     (ruby . t)
     (dot . t)
     (octave . t)
     (sqlite . t)
     ))
#+end_src
				
***** C mode
      
      #+begin_src emacs-lisp
        (defun sb:c-mode-hook () 
               (c-set-style "bsd")
               (setq c-basic-offset 4
                     indent-tabs-mode nil
                     default-tab-width 4))
               
        (add-hook 'c-mode-hook 'sb:c-mode-hook)
      #+end_src
***** C++ mode
      #+begin_src emacs-lisp
        (defun sb:c++-mode-hook () 
               (c-set-style "bsd")
               (setq c-basic-offset 4
                     indent-tabs-mode nil
                     default-tab-width 4))
               
        (add-hook 'c++-mode-hook 'sb:c++-mode-hook)
      #+end_src

***** GnuPG
******* Nothing to config here, except maybe on windows
***** LaTeX

      Don't "word process", edit src.

      
******* AUCTeX

	Disabled for now
	    
#+begin_src emacs-lisp

;(load "auctex.el" nil t t)
;(load "preview-latex.el" nil t t)

;(require 'flymake)

;(defun flymake-get-tex-args (file-name)
;  (list "pdflatex"
;  (list "-file-line-error" "-draftmode" "-interaction=nonstopmode" file-name)))

;(add-hook 'LaTeX-mode-hook 'flymake-mode)

;(setq ispell-program-name "aspell") ; could be ispell as well, depending on your preferences
;(setq ispell-dictionary "english") ; this can obviously be set to any language your spell-checking program supports

;(add-hook 'LaTeX-mode-hook 'flyspell-mode)
;(add-hook 'LaTeX-mode-hook 'flyspell-buffer)

;(setq TeX-auto-save t)
;(setq TeX-parse-self t)
;(setq TeX-save-query nil)

#+end_src

***** Haskell Mode

      
******* Not totally sure what doc mode is yet... sounds like a good enough idea

	#+begin_src emacs-lisp
          (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
	#+end_src

******* Indentation

	#+begin_src emacs-lisp
          ;;(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
          (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
          ;;(add-hook 'haskell-mode-hook 'turn-on-haskell-simple-indent) 
	#+end_src

***** Others
